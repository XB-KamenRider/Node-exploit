var util = require('util');

// Sub 仅仅继承了Base 在原型中定义的函数，而构造函数内部创造的 base 属 性和 sayHello 函数都没有被 Sub 继承。
// function Base() {
//     this.name = 'base';
//     this.base = 1991;
//     this.sayHello = function() {
//         console.log('Hello - ' + this.name);
//     };
// };
// Base.prototype.showName = function() {
//     console.log(this.name);
// };

// function Sub() {
//     this.name = 'sub';
// };

// util.inherits(Sub, Base);

// var objBase = new Base();

// objBase.showName();
// objBase.sayHello();

// console.log(objBase);
// var objSub = new Sub();
// objSub.showName();
// objSub.sayHello();
// console.log(objSub);

function Person() {
    this.name = 'byvoid';
    this.toString = function() {
        return this.name;
    }
}

// var obj = new Person();
// console.log(util.inspect(obj));
// console.log(util.inspect(obj, true));
var list = [{
    name: 'liude'
}, {
    name: 'xiaoming'
}]
var obj = {
    name: "liude"
};
// 判断传入是否为数组
// console.log(util.isArray(list));
// console.log(util.isArray(new Array));
// console.log(util.isArray(obj));

// 判断传入是否为正则表达式
// console.log(util.isRegExp(/[a-z]/));
// console.log(util.isRegExp(new RegExp('[A-Z]')));
// console.log(util.isRegExp(obj));

// 判断传入是否为时间格式
// console.log(util.isDate(new Date()));
// console.log(util.isDate(Date()));
// console.log(util.isDate({}));

// 传入错误对象
console.log(util.isError(new Error()));
console.log(util.isError(new TypeError()));
console.log(util.isError({ name: 'Error', message: 'an error occurred' }));